@model Bootstarter.ViewModels.IdeaIndexViewModel
@{
    /**/
    ViewBag.Title = "Search Results";
}

<h2 class="text-center">@ViewBag.Title</h2>
<div>
    @using (Html.BeginForm("Search", "Home", FormMethod.Get, new { @class = "form-inline my-2 my-lg-0 search-form" }))
    {
    <div class="autocomplete">
        @Html.TextBoxFor(m => m.Search, new { placeholder = "Explore", @id = "search", @class = "form-control mr-sm-8" })
        <button class="btn btn-secondary my-2 my-sm-0" type="submit"><i class="fa fa-search"></i></button>
    </div>
    <div class="pageperitem">
        @Html.LabelFor(m => m.ItemsPerPage, new { @class = "h5" })
        @Html.EnumDropDownListFor(m => m.ItemsPerPage, new { @id = "itemsPerPageSelect", @class = "form-control" })
    </div>    
            
    
    }
</div>
<br/>

<div class="row idea-list">
    @foreach (var idea in Model.Ideas)
    {
        <div class="idea">
            <a href="@Url.Action("Details","Ideas",new { id = idea.Id})">
                <h4>@idea.Name</h4>
            </a>
            <a class="link" href="@Url.Action("Details","Ideas",new { id = idea.Id})">
                <img src="@idea.Image" class="rounded float-left zoom" alt="@idea.Name">
            </a>
            <a href="@Url.Action("UserIdeas","Ideas",new { id = idea.FounderId})">
                <p>by @idea.Founder.CompanyName</p>
            </a>
        </div>

    }
</div>

<nav aria-label="Page navigation example">
    <ul class="pagination justify-content-center">
        @if (Model.CurrentPage == 1)
        {
            <li class="page-item disabled">
                <a class="page-link" href="#" tabindex="-1" aria-disabled="true">Previous</a>
            </li>
        }
        else
        {
            <li class="page-item"><a class="page-link" href="@Url.Action("Search", "Home", new { page = Model.CurrentPage-1, itemsPerPage = (int)Model.ItemsPerPage, Search = Model.Search })">Previous</a></li>
        }
        @for (int i = 1; i <= Model.TotalPages; i++)
        {
            if (i == Model.CurrentPage)
            {
                <li class="page-item active" aria-current="page">
                    <a class="page-link" href="@Url.Action("Search", "Home", new { page = i, itemsPerPage = (int) Model.ItemsPerPage, Search = Model.Search })">@i <span class="sr-only">(current)</span></a>
                </li>
            }
            else
            {
                <li class="page-item">
                    @Html.ActionLink($"{i}", "Search", "Home", new { page = i, itemsPerPage = (int)Model.ItemsPerPage, Search = Model.Search }, new { @class = "page-link" })
                </li>
            }
        }
        @if (Model.CurrentPage == Model.TotalPages)
        {
            <li class="page-item disabled">
                <a class="page-link" href="#" tabindex="-1" aria-disabled="true">Next</a>
            </li>
        }
        else
        {
            <li class="page-item"><a class="page-link" href="@Url.Action("Search", "Home", new { page = Model.CurrentPage+1, itemsPerPage = (int)Model.ItemsPerPage, Search = Model.Search })">Next</a></li>
        }
    </ul>
</nav>
@*<div class="row">
        @for (int i = 1; i <= Model.TotalPages; i++)
        {
            @Html.ActionLink($"{i}", "Index", "Home", new { page = i, itemsPerPage = (int)Model.ItemsPerPage, Search = Model.Search }, new { @class = (i == Model.CurrentPage) ? "active-page page-link-2" : "page-link-2" })
        }
    </div>*@

@section scripts
{
    <script>
        function autocomplete(inp, arr) {
            /*the autocomplete function takes two arguments,
            the text field element and an array of possible autocompleted values:*/
            var currentFocus;
            /*execute a function when someone writes in the text field:*/
            inp.addEventListener("input", function (e) {
                var a, b, i, val = this.value;
                /*close any already open lists of autocompleted values*/
                closeAllLists();
                if (!val) { return false; }
                currentFocus = -1;
                /*create a DIV element that will contain the items (values):*/
                a = document.createElement("DIV");
                a.setAttribute("id", this.id + "autocomplete-list");
                a.setAttribute("class", "autocomplete-items");
                /*append the DIV element as a child of the autocomplete container:*/
                this.parentNode.appendChild(a);
                /*for each item in the array...*/
                for (i = 0; i < arr.length; i++) {
                    /*check if the item includes the same letters as the text field value:*/
                    if (arr[i].toLowerCase().includes(val.toLowerCase())) {
                        /*create a DIV element for each matching element:*/
                        b = document.createElement("DIV");
                        /*make the matching letters bold:*/
                        b.innerHTML = "<strong>" + arr[i].substr(0, val.length) + "</strong>";
                        b.innerHTML += arr[i].substr(val.length);
                        /*insert a input field that will hold the current array item's value:*/
                        b.innerHTML += "<input type='hidden' value='" + arr[i] + "'>";
                        /*execute a function when someone clicks on the item value (DIV element):*/
                        b.addEventListener("click", function (e) {
                            /*insert the value for the autocomplete text field:*/
                            inp.value = this.getElementsByTagName("input")[0].value;
                            /*close the list of autocompleted values,
                            (or any other open lists of autocompleted values:*/
                            closeAllLists();
                        });
                        a.appendChild(b);
                    }
                }
            });
            /*execute a function presses a key on the keyboard:*/
            inp.addEventListener("keydown", function (e) {
                var x = document.getElementById(this.id + "autocomplete-list");
                if (x) x = x.getElementsByTagName("div");
                if (e.keyCode == 40) {
                    /*If the arrow DOWN key is pressed,
                    increase the currentFocus variable:*/
                    currentFocus++;
                    /*and and make the current item more visible:*/
                    addActive(x);
                } else if (e.keyCode == 38) { //up
                    /*If the arrow UP key is pressed,
                    decrease the currentFocus variable:*/
                    currentFocus--;
                    /*and and make the current item more visible:*/
                    addActive(x);
                } else if (e.keyCode == 13) {
                    /*If the ENTER key is pressed, prevent the form from being submitted,*/
                    e.preventDefault();
                    if (currentFocus > -1) {
                        /*and simulate a click on the "active" item:*/
                        if (x) x[currentFocus].click();
                    }
                }
            });
            function addActive(x) {
                /*a function to classify an item as "active":*/
                if (!x) return false;
                /*start by removing the "active" class on all items:*/
                removeActive(x);
                if (currentFocus >= x.length) currentFocus = 0;
                if (currentFocus < 0) currentFocus = (x.length - 1);
                /*add class "autocomplete-active":*/
                x[currentFocus].classList.add("autocomplete-active");
            }
            function removeActive(x) {
                /*a function to remove the "active" class from all autocomplete items:*/
                for (var i = 0; i < x.length; i++) {
                    x[i].classList.remove("autocomplete-active");
                }
            }
            function closeAllLists(elmnt) {
                /*close all autocomplete lists in the document,
                except the one passed as an argument:*/
                var x = document.getElementsByClassName("autocomplete-items");
                for (var i = 0; i < x.length; i++) {
                    if (elmnt != x[i] && elmnt != inp) {
                        x[i].parentNode.removeChild(x[i]);
                    }
                }
            }
            /*execute a function when someone clicks in the document:*/
            document.addEventListener("click", function (e) {
                closeAllLists(e.target);
            });
        }

        window.onload = () => {
            var ideas = [];
            const itemsPerPageSelect = document.getElementById('itemsPerPageSelect');

            for (let i = 0; i < @Model.TotalPages; i++) {
                $.get("/api/Ideas", { page: i })
                    .done((data) => {
                        Array.from(data).map(idea => {
                            if (!ideas.includes(idea.Name)) {
                                ideas.push(idea.Name);
                            }
                            if (!ideas.includes(idea.Founder.CompanyName)) {
                                ideas.push(idea.Founder.CompanyName);
                            }
                        });
                    });
            }
            ideas.sort();
            autocomplete(document.getElementById("search"), ideas);

            itemsPerPageSelect.onchange = (e) => {
                e.target.form.submit();
            }

        };
    </script>
}

