@model Bootstarter.ViewModels.IdeaDetailsViewModel

@{
    ViewBag.Title = "Details";
}

<h2>Details</h2>
<br />
<div>
    <h3>
        @Html.DisplayFor(model => model.Idea.Name)
    </h3>

    @if (User.Identity.IsAuthenticated)
    {
        if (!Model.Idea.Cancelled && !Model.VisitedByFounder)
        {
            if (Model.IsInterested)
            {
                <button class="btn btn-outline-success js-toggle-interest" data-user-id="@Model.Idea.Id">Unfollow</button>
            }
            else
            {
                <button class="btn btn-success js-toggle-interest" data-user-id="@Model.Idea.Id">Follow</button>
            }
            <button type="button" class="btn btn-success js-toggle-BackItUp" data-toggle="modal" data-target="#exampleModal" data-user-id="@Model.Idea.Id">Back It Up</button>
        }
        else if (Model.Idea.Cancelled)
        {
            <span class="badge badge-pill badge-warning">Cancelled</span>  <span>@@ @Html.DisplayFor(model => model.Idea.CancellationDate)</span>
        }
    }

    <!-- Modal -->
    <div class="modal fade" id="exampleModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="exampleModalLabel">Bomb It</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    @using (Html.BeginForm("BackingUp", "Transactions"))
                    {
                    @Html.AntiForgeryToken()
                    @Html.HiddenFor(model => model.TransactionDto.IdeaId, new { @Value = Model.Idea.Id })
                    <div class="form-horizontal">
                        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                        <div class="form-group">
                            @Html.LabelFor(model => model.TransactionDto.Backing, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.TransactionDto.Backing, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.TransactionDto.Backing, "", new { @class = "text-danger" })
                            </div>
                        </div>

                    </div>
                    }
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-danger" data-dismiss="modal"><i class="fa fa-times"></i></button>
                    <button type="button" id="submit" class="btn btn-success"><i class="fa fa-check"></i></button>
                </div>
            </div>
        </div>
    </div>
    <hr />
    <div class="row">
        <div class="col-sm-6">
            <dl class="dl-horizontal">
                <dt>
                    @Html.DisplayNameFor(model => model.Idea.Founder.CompanyName)
                </dt>

                <dd>
                    @Html.DisplayFor(model => model.Idea.Founder.CompanyName)
                </dd>

                @*<dt>
            @Html.DisplayNameFor(model => model.Idea.Description)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.Idea.Description)
        </dd>

        <div class="card border-info mb-3" style="max-width: 40rem;">
            <div class="card-body">
                <h4 class="card-title">@Html.DisplayNameFor(model => model.Idea.Description)</h4>
                <p class="card-text">@Model.Idea.Description</p>
            </div>
        </div>

        <div class="card text-white bg-secondary mb-3" style="max-width: 100%;">
            <div class="card-body">
                <h4 class="card-title">@Html.DisplayNameFor(model => model.Idea.Description)</h4>
                <p class="card-text">@Model.Idea.Description</p>
            </div>
        </div>*@

                <div class="card" style="width: 100%;">
                    <div class="card-body">
                        <h4 class="card-title">@Html.DisplayNameFor(model => model.Idea.Description)</h4>
                        <p class="card-text">@Model.Idea.Description</p>
                    </div>
                </div>

                <p class="text-right">Goal: @Model.Idea.Goal&euro;</p>
                <div class="progress" style="height:23px">
                    <div class="progress-bar progress-bar-striped progress-bar-animated bg-info" role="progressbar" style="width:@($"{@Model.Idea.MoneyGathered / @Model.Idea.Goal / (Math.Floor(@Model.Idea.MoneyGathered / @Model.Idea.Goal)+1) * 100:F0}")%" aria-valuenow="@($"{@Model.Idea.MoneyGathered / @Model.Idea.Goal * 100:F0}")" aria-valuemin="0" aria-valuemax="@(Math.Ceiling(@Model.Idea.MoneyGathered / @Model.Idea.Goal)*100)">@($"{(@Model.Idea.MoneyGathered / @Model.Idea.Goal * 100):F1}")%</div>
                </div>

                <dt>
                    @Html.DisplayNameFor(model => model.Idea.MoneyGathered):
                </dt>

                <dd>
                    @Html.DisplayFor(model => model.Idea.MoneyGathered)&euro;
                </dd>

                @if (Model.VisitedByFounder)
                {
                    <dt>
                        @Html.DisplayNameFor(model => model.Idea.SubmissionDate):
                    </dt>

                    <dd>
                        @Model.Idea.SubmissionDate.ToString("dd MMMM yyyy HH:mm:ss", new System.Globalization.CultureInfo("en-US"))
                    </dd>
                }
                <dt>
                    @Html.DisplayNameFor(model => model.Idea.StartDate):
                </dt>

                <dd>
                    @Model.Idea.StartDate.ToString("dd MMMM yyyy", new System.Globalization.CultureInfo("en-US"))
                </dd>

                <dt>
                    @Html.DisplayNameFor(model => model.Idea.EndDate):
                </dt>

                <dd>
                    @Model.Idea.EndDate.ToString("dd MMMM yyyy", new System.Globalization.CultureInfo("en-US"))
                </dd>
            </dl>
        </div>
        <div class="col-sm-6">
            <img src="@Model.Idea.Image" class="rounded float-left" width="100%" alt="@Model.Idea.Name">
        </div>
        
    </div>
    <hr />

</div>
<p>
    @if (User.IsInRole("Admin") || Model.VisitedByFounder)
    {
    <span>@Html.ActionLink("Edit", "Edit", new { id = Model.Idea.Id }, new { @class = "btn btn-primary" }) | </span>
    }
    @Html.ActionLink("Back to List", "Index", null, new { @class = "btn btn-primary" })
</p>
<hr/>

<div class="col text-center">
    <button class="btn btn-primary" id="show-comment-button">Show Comments</button>
</div>
<div id="comments">
    <h4 class="comment-header"></h4>

    <div class="comment-section">

    </div>
    @if (User.Identity.IsAuthenticated)
    {
        <div class="form-group">
            <p>Post a comment:</p>
            <textarea class="form-control" rows="4" name='comment' id='comment'></textarea><br />
            <button class="btn btn-primary" id="comment-button">Send</button>
        </div>
    }
</div>



    @section scripts
{
        <script>
        $(document).ready(() => {
            $('#submit').click(() => {
                $(".modal-body form").submit()
            })

            let options = { weekday: 'long', year: 'numeric', month: 'long', day: '2-digit', hour: '2-digit', minute: '2-digit' };

            $("#comment-button").click(() => {
                var comm = $('#comment').val();
                $.post("/api/comments", { Comment: comm, IdeaId: @Model.Idea.Id })
                    .done(function () {
                        $('.comment-section').append(`<blockquote class= "blockquote grey-background" >
                                                        <p class="mb-0">${comm}</p>
                                                        <footer class="blockquote-footer text-right">Your comment</footer>
                                                        </blockquote >
                                                           `);
                        $('#comment').val('');
                    })
                    .fail(function () {
                        alert("Something Failed");
                    });
            });

            $("#show-comment-button").click((e) => {
                $.get("/api/comments", { ideaId: @Model.Idea.Id })
                .done((data) => {
                    var plural = Array.from(data).length !== 1 ? 'Comments' : 'Comment';
                    $('.comment-header').append(`${Array.from(data).length} ${plural}`);
                    Array.from(data).map(comment => {
                        var name = comment.User.LastName ? `${comment.User.LastName} ${comment.User.FirstName}` : 'admin';
                        $('.comment-section').append(`<blockquote class="blockquote grey-background">
                                                          <p class="mb-0">${comment.InspirationWord}</p>
                                                          <footer class="blockquote-footer text-right">${name} said on ${new Intl.DateTimeFormat('en-US', options).format(Date.parse(comment.CommentTime))} </footer>
                                                        </blockquote>`);
                    });
                })
                .fail(function () {
                    alert("Something Failed");
                });
                $('#comments').show();
                $("#show-comment-button").prop('disabled', true);
            });


            var followButton;
            $(".js-toggle-interest").click((e) => {
                followButton = $(e.target);
                var IdeaId = followButton.attr("data-user-id");
                if (followButton.hasClass("btn-success")) {
                    $.post("/api/interests", { IdeaId: IdeaId })
                        .done(function () {
                            var text = followButton.text() === "Follow" ? "Unfollow" : "Follow";
                            followButton.toggleClass("btn-outline-success").toggleClass("btn-success").text(text);
                        })
                        .fail(function () {
                            alert("Something went wrong, please try again");
                        });
                }
                else {
                    $.ajax({
                        url: "/api/interests/" + IdeaId,
                        method: "DELETE"
                    })
                        .done(function () {
                            var text = followButton.text() === "Follow" ? "Unfollow" : "Follow";
                            followButton.toggleClass("btn-outline-success").toggleClass("btn-success").text(text);
                        })
                        .fail(function () {
                            alert("Something Failed!");
                        });
                }
            });
        });
        </script>
    }

